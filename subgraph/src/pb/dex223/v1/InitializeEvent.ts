// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Transaction } from "./Transaction";

export class InitializeEvent {
  static encode(message: InitializeEvent, writer: Writer): void {
    const tx = message.tx;
    if (tx !== null) {
      writer.uint32(10);
      writer.fork();
      Transaction.encode(tx, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.sqrtPriceX96);

    writer.uint32(24);
    writer.int32(message.tick);

    writer.uint32(34);
    writer.string(message.poolAddress);
  }

  static decode(reader: Reader, length: i32): InitializeEvent {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new InitializeEvent();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.tx = Transaction.decode(reader, reader.uint32());
          break;

        case 2:
          message.sqrtPriceX96 = reader.string();
          break;

        case 3:
          message.tick = reader.int32();
          break;

        case 4:
          message.poolAddress = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  tx: Transaction | null;
  sqrtPriceX96: string;
  tick: i32;
  poolAddress: string;

  constructor(
    tx: Transaction | null = null,
    sqrtPriceX96: string = "",
    tick: i32 = 0,
    poolAddress: string = ""
  ) {
    this.tx = tx;
    this.sqrtPriceX96 = sqrtPriceX96;
    this.tick = tick;
    this.poolAddress = poolAddress;
  }
}

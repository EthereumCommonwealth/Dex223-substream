// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { PoolCreatedEvent } from "./PoolCreatedEvent";
import { InitializeEvent } from "./InitializeEvent";
import { SwapEvent } from "./SwapEvent";
import { MintEvent } from "./MintEvent";
import { BurnEvent } from "./BurnEvent";
import { FlashEvent } from "./FlashEvent";
import { CollectEvent } from "./CollectEvent";
import { ERC20WrapperCreatedEvent } from "./ERC20WrapperCreatedEvent";
import { ERC223WrapperCreatedEvent } from "./ERC223WrapperCreatedEvent";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const poolCreatedEvents = message.poolCreatedEvents;
    for (let i: i32 = 0; i < poolCreatedEvents.length; ++i) {
      writer.uint32(10);
      writer.fork();
      PoolCreatedEvent.encode(poolCreatedEvents[i], writer);
      writer.ldelim();
    }

    const initializeEvents = message.initializeEvents;
    for (let i: i32 = 0; i < initializeEvents.length; ++i) {
      writer.uint32(18);
      writer.fork();
      InitializeEvent.encode(initializeEvents[i], writer);
      writer.ldelim();
    }

    const swapEvents = message.swapEvents;
    for (let i: i32 = 0; i < swapEvents.length; ++i) {
      writer.uint32(26);
      writer.fork();
      SwapEvent.encode(swapEvents[i], writer);
      writer.ldelim();
    }

    const mintEvents = message.mintEvents;
    for (let i: i32 = 0; i < mintEvents.length; ++i) {
      writer.uint32(34);
      writer.fork();
      MintEvent.encode(mintEvents[i], writer);
      writer.ldelim();
    }

    const burnEvents = message.burnEvents;
    for (let i: i32 = 0; i < burnEvents.length; ++i) {
      writer.uint32(42);
      writer.fork();
      BurnEvent.encode(burnEvents[i], writer);
      writer.ldelim();
    }

    const flashEvents = message.flashEvents;
    for (let i: i32 = 0; i < flashEvents.length; ++i) {
      writer.uint32(50);
      writer.fork();
      FlashEvent.encode(flashEvents[i], writer);
      writer.ldelim();
    }

    const collectEvents = message.collectEvents;
    for (let i: i32 = 0; i < collectEvents.length; ++i) {
      writer.uint32(58);
      writer.fork();
      CollectEvent.encode(collectEvents[i], writer);
      writer.ldelim();
    }

    const erc20WrapperCreatedEvents = message.erc20WrapperCreatedEvents;
    for (let i: i32 = 0; i < erc20WrapperCreatedEvents.length; ++i) {
      writer.uint32(66);
      writer.fork();
      ERC20WrapperCreatedEvent.encode(erc20WrapperCreatedEvents[i], writer);
      writer.ldelim();
    }

    const erc223WrapperCreatedEvents = message.erc223WrapperCreatedEvents;
    for (let i: i32 = 0; i < erc223WrapperCreatedEvents.length; ++i) {
      writer.uint32(74);
      writer.fork();
      ERC223WrapperCreatedEvent.encode(erc223WrapperCreatedEvents[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.poolCreatedEvents.push(
            PoolCreatedEvent.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.initializeEvents.push(
            InitializeEvent.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.swapEvents.push(SwapEvent.decode(reader, reader.uint32()));
          break;

        case 4:
          message.mintEvents.push(MintEvent.decode(reader, reader.uint32()));
          break;

        case 5:
          message.burnEvents.push(BurnEvent.decode(reader, reader.uint32()));
          break;

        case 6:
          message.flashEvents.push(FlashEvent.decode(reader, reader.uint32()));
          break;

        case 7:
          message.collectEvents.push(
            CollectEvent.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.erc20WrapperCreatedEvents.push(
            ERC20WrapperCreatedEvent.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.erc223WrapperCreatedEvents.push(
            ERC223WrapperCreatedEvent.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  poolCreatedEvents: Array<PoolCreatedEvent>;
  initializeEvents: Array<InitializeEvent>;
  swapEvents: Array<SwapEvent>;
  mintEvents: Array<MintEvent>;
  burnEvents: Array<BurnEvent>;
  flashEvents: Array<FlashEvent>;
  collectEvents: Array<CollectEvent>;
  erc20WrapperCreatedEvents: Array<ERC20WrapperCreatedEvent>;
  erc223WrapperCreatedEvents: Array<ERC223WrapperCreatedEvent>;

  constructor(
    poolCreatedEvents: Array<PoolCreatedEvent> = [],
    initializeEvents: Array<InitializeEvent> = [],
    swapEvents: Array<SwapEvent> = [],
    mintEvents: Array<MintEvent> = [],
    burnEvents: Array<BurnEvent> = [],
    flashEvents: Array<FlashEvent> = [],
    collectEvents: Array<CollectEvent> = [],
    erc20WrapperCreatedEvents: Array<ERC20WrapperCreatedEvent> = [],
    erc223WrapperCreatedEvents: Array<ERC223WrapperCreatedEvent> = []
  ) {
    this.poolCreatedEvents = poolCreatedEvents;
    this.initializeEvents = initializeEvents;
    this.swapEvents = swapEvents;
    this.mintEvents = mintEvents;
    this.burnEvents = burnEvents;
    this.flashEvents = flashEvents;
    this.collectEvents = collectEvents;
    this.erc20WrapperCreatedEvents = erc20WrapperCreatedEvents;
    this.erc223WrapperCreatedEvents = erc223WrapperCreatedEvents;
  }
}
